import java.util.*;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.*;

class DFS
{
	Stack<Integer> stack;
	public DFS()
	{
		stack=new Stack<Integer>();
	}
	public int dfs(int adj[][],int source)
	{
		int n=adj[source].length-1;
		int visited[]=new int[n+1];
		int element,i;
		element=source;
		i=source;
		int c=0,c1=0,c2=0;
		while(!stack.isEmpty())
		{
			element=stack.peek();
			i=element;
			c1=1;
			c2=1;
			while(i<=n)
			{
				if(adj[element][i]==1 && visited[i]==1)
				{
					stack.push(i);
					visited[i]=1;
					i=1;
					c2++;
				}
				if(c2>c1)
				{c++;}
				i++;
			}
			stack.pop();
		}
		return c;
	}
}
class happyVertices
{
     public static void main(String args[])throws IOException
	 {
	 	try{
          BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
          //System.out.println("Enter")
          int N=Integer.parseInt(br.readLine());
          int M=Integer.parseInt(br.readLine());
          int adj[][]=new int[N+1][M+1];
          for(int i=0;i<M;i++)
          {
          	 int x=Integer.parseInt(br.readLine());
             int y=Integer.parseInt(br.readLine());
              adj[x][y]=1;
          }
          DFS dfs=new DFS();
         System.out.println( dfs.dfs(adj,1));
	 }catch(Exception ee)
	 {
	 	return;
	 }
	 }
}